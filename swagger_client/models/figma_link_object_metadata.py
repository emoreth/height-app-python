# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  --- # Authentication  The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.  i.e. Get your workspace.  ```bash curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```  Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.  # Object formats  All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.  e.g. a task object.  ```json {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] } ```  # Date formats  Every date uses the ISO format e.g.  ```js \"2019-11-07T17:00:00.000Z\" ```  # Real-time  Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.  # Rate limits  To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.  Height allows up to 120 requests/min, but we have stricter limits on these endpoints:  - `POST /activities`: 60 requests/min - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FigmaLinkObjectMetadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'document': 'FigmaLinkObjectMetadataDocument',
        'file_key': 'str',
        'page': 'OneOfFigmaLinkObjectMetadataPage',
        'frame': 'OneOfFigmaLinkObjectMetadataFrame'
    }

    attribute_map = {
        'type': 'type',
        'document': 'document',
        'file_key': 'fileKey',
        'page': 'page',
        'frame': 'frame'
    }

    def __init__(self, type=None, document=None, file_key=None, page=None, frame=None):  # noqa: E501
        """FigmaLinkObjectMetadata - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._document = None
        self._file_key = None
        self._page = None
        self._frame = None
        self.discriminator = None
        self.type = type
        if document is not None:
            self.document = document
        self.file_key = file_key
        if page is not None:
            self.page = page
        if frame is not None:
            self.frame = frame

    @property
    def type(self):
        """Gets the type of this FigmaLinkObjectMetadata.  # noqa: E501

        The type of the metadata.  # noqa: E501

        :return: The type of this FigmaLinkObjectMetadata.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FigmaLinkObjectMetadata.

        The type of the metadata.  # noqa: E501

        :param type: The type of this FigmaLinkObjectMetadata.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["figmaLink"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def document(self):
        """Gets the document of this FigmaLinkObjectMetadata.  # noqa: E501


        :return: The document of this FigmaLinkObjectMetadata.  # noqa: E501
        :rtype: FigmaLinkObjectMetadataDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this FigmaLinkObjectMetadata.


        :param document: The document of this FigmaLinkObjectMetadata.  # noqa: E501
        :type: FigmaLinkObjectMetadataDocument
        """

        self._document = document

    @property
    def file_key(self):
        """Gets the file_key of this FigmaLinkObjectMetadata.  # noqa: E501

        The file key of the Figma document.  # noqa: E501

        :return: The file_key of this FigmaLinkObjectMetadata.  # noqa: E501
        :rtype: str
        """
        return self._file_key

    @file_key.setter
    def file_key(self, file_key):
        """Sets the file_key of this FigmaLinkObjectMetadata.

        The file key of the Figma document.  # noqa: E501

        :param file_key: The file_key of this FigmaLinkObjectMetadata.  # noqa: E501
        :type: str
        """
        if file_key is None:
            raise ValueError("Invalid value for `file_key`, must not be `None`")  # noqa: E501

        self._file_key = file_key

    @property
    def page(self):
        """Gets the page of this FigmaLinkObjectMetadata.  # noqa: E501


        :return: The page of this FigmaLinkObjectMetadata.  # noqa: E501
        :rtype: OneOfFigmaLinkObjectMetadataPage
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this FigmaLinkObjectMetadata.


        :param page: The page of this FigmaLinkObjectMetadata.  # noqa: E501
        :type: OneOfFigmaLinkObjectMetadataPage
        """

        self._page = page

    @property
    def frame(self):
        """Gets the frame of this FigmaLinkObjectMetadata.  # noqa: E501


        :return: The frame of this FigmaLinkObjectMetadata.  # noqa: E501
        :rtype: OneOfFigmaLinkObjectMetadataFrame
        """
        return self._frame

    @frame.setter
    def frame(self, frame):
        """Sets the frame of this FigmaLinkObjectMetadata.


        :param frame: The frame of this FigmaLinkObjectMetadata.  # noqa: E501
        :type: OneOfFigmaLinkObjectMetadataFrame
        """

        self._frame = frame

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FigmaLinkObjectMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FigmaLinkObjectMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
