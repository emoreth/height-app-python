# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  ---  # Authentication   The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.   i.e. Get your workspace.   ```bash  curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```   Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.   # Object formats   All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.   e.g. a task object.   ```json  {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] }  ```   # Date formats   Every date uses the ISO format e.g.   ```js  \"2019-11-07T17:00:00.000Z\"  ```   # Real-time   Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.   # Rate limits   To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.   Height allows up to 120 requests/min, but we have stricter limits on these endpoints:   - `POST /activities`: 60 requests/min  - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ActivityObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'created_at': 'datetime',
        'task_id': 'str',
        'created_user_id': 'str',
        'type': 'str',
        'message': 'str',
        'old_value': 'str',
        'new_value': 'str',
        'reactjis': 'list[ActivityObjectReactjis]',
        'read_user_ids': 'list[str]',
        'url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'created_at': 'createdAt',
        'task_id': 'taskId',
        'created_user_id': 'createdUserId',
        'type': 'type',
        'message': 'message',
        'old_value': 'oldValue',
        'new_value': 'newValue',
        'reactjis': 'reactjis',
        'read_user_ids': 'readUserIds',
        'url': 'url'
    }

    def __init__(self, id=None, model=None, created_at=None, task_id=None, created_user_id=None, type=None, message=None, old_value=None, new_value=None, reactjis=None, read_user_ids=None, url=None):  # noqa: E501
        """ActivityObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._created_at = None
        self._task_id = None
        self._created_user_id = None
        self._type = None
        self._message = None
        self._old_value = None
        self._new_value = None
        self._reactjis = None
        self._read_user_ids = None
        self._url = None
        self.discriminator = None
        self.id = id
        self.model = model
        self.created_at = created_at
        self.task_id = task_id
        self.created_user_id = created_user_id
        self.type = type
        if message is not None:
            self.message = message
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value
        self.reactjis = reactjis
        self.read_user_ids = read_user_ids
        self.url = url

    @property
    def id(self):
        """Gets the id of this ActivityObject.  # noqa: E501

        The unique id of the activity.  # noqa: E501

        :return: The id of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActivityObject.

        The unique id of the activity.  # noqa: E501

        :param id: The id of this ActivityObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self):
        """Gets the model of this ActivityObject.  # noqa: E501

        The model is always `activity`.  # noqa: E501

        :return: The model of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ActivityObject.

        The model is always `activity`.  # noqa: E501

        :param model: The model of this ActivityObject.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def created_at(self):
        """Gets the created_at of this ActivityObject.  # noqa: E501

        The date when the activity was created. See [Date formats](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).  # noqa: E501

        :return: The created_at of this ActivityObject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ActivityObject.

        The date when the activity was created. See [Date formats](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).  # noqa: E501

        :param created_at: The created_at of this ActivityObject.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def task_id(self):
        """Gets the task_id of this ActivityObject.  # noqa: E501

        The task id of the task this activity is linked to.  # noqa: E501

        :return: The task_id of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this ActivityObject.

        The task id of the task this activity is linked to.  # noqa: E501

        :param task_id: The task_id of this ActivityObject.  # noqa: E501
        :type: str
        """
        if task_id is None:
            raise ValueError("Invalid value for `task_id`, must not be `None`")  # noqa: E501

        self._task_id = task_id

    @property
    def created_user_id(self):
        """Gets the created_user_id of this ActivityObject.  # noqa: E501

        The user id that posted that activity.  # noqa: E501

        :return: The created_user_id of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._created_user_id

    @created_user_id.setter
    def created_user_id(self, created_user_id):
        """Sets the created_user_id of this ActivityObject.

        The user id that posted that activity.  # noqa: E501

        :param created_user_id: The created_user_id of this ActivityObject.  # noqa: E501
        :type: str
        """
        if created_user_id is None:
            raise ValueError("Invalid value for `created_user_id`, must not be `None`")  # noqa: E501

        self._created_user_id = created_user_id

    @property
    def type(self):
        """Gets the type of this ActivityObject.  # noqa: E501

        The type of the activity.  # noqa: E501

        :return: The type of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityObject.

        The type of the activity.  # noqa: E501

        :param type: The type of this ActivityObject.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["comment", "description", "createdAt", "statusChange", "statusRemoved", "assigneeChange", "listsChange", "nameChange", "customFieldChange", "fieldOptionRemoved", "subtaskAdded", "parentTaskChange", "copilot"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def message(self):
        """Gets the message of this ActivityObject.  # noqa: E501

        The message/body of this comment/description.  # noqa: E501

        :return: The message of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ActivityObject.

        The message/body of this comment/description.  # noqa: E501

        :param message: The message of this ActivityObject.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def old_value(self):
        """Gets the old_value of this ActivityObject.  # noqa: E501

        For updates, this is the value before the change.  # noqa: E501

        :return: The old_value of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this ActivityObject.

        For updates, this is the value before the change.  # noqa: E501

        :param old_value: The old_value of this ActivityObject.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this ActivityObject.  # noqa: E501

        For status, this is the value after the change.  # noqa: E501

        :return: The new_value of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ActivityObject.

        For status, this is the value after the change.  # noqa: E501

        :param new_value: The new_value of this ActivityObject.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def reactjis(self):
        """Gets the reactjis of this ActivityObject.  # noqa: E501

        An array of reactjis.  # noqa: E501

        :return: The reactjis of this ActivityObject.  # noqa: E501
        :rtype: list[ActivityObjectReactjis]
        """
        return self._reactjis

    @reactjis.setter
    def reactjis(self, reactjis):
        """Sets the reactjis of this ActivityObject.

        An array of reactjis.  # noqa: E501

        :param reactjis: The reactjis of this ActivityObject.  # noqa: E501
        :type: list[ActivityObjectReactjis]
        """
        if reactjis is None:
            raise ValueError("Invalid value for `reactjis`, must not be `None`")  # noqa: E501

        self._reactjis = reactjis

    @property
    def read_user_ids(self):
        """Gets the read_user_ids of this ActivityObject.  # noqa: E501

        The user ids that read this activity.  # noqa: E501

        :return: The read_user_ids of this ActivityObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._read_user_ids

    @read_user_ids.setter
    def read_user_ids(self, read_user_ids):
        """Sets the read_user_ids of this ActivityObject.

        The user ids that read this activity.  # noqa: E501

        :param read_user_ids: The read_user_ids of this ActivityObject.  # noqa: E501
        :type: list[str]
        """
        if read_user_ids is None:
            raise ValueError("Invalid value for `read_user_ids`, must not be `None`")  # noqa: E501

        self._read_user_ids = read_user_ids

    @property
    def url(self):
        """Gets the url of this ActivityObject.  # noqa: E501

        The url of the activity.  # noqa: E501

        :return: The url of this ActivityObject.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ActivityObject.

        The url of the activity.  # noqa: E501

        :param url: The url of this ActivityObject.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
