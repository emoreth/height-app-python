# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  --- # Authentication  The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.  i.e. Get your workspace.  ```bash curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```  Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.  # Object formats  All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.  e.g. a task object.  ```json {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] } ```  # Date formats  Every date uses the ISO format e.g.  ```js \"2019-11-07T17:00:00.000Z\" ```  # Real-time  Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.  # Rate limits  To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.  Height allows up to 120 requests/min, but we have stricter limits on these endpoints:  - `POST /activities`: 60 requests/min - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SecurityLogEventObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'created_at': 'datetime',
        'user_id': 'str',
        'user_email': 'str',
        'event_type': 'str',
        'old_value': 'object',
        'new_value': 'object'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'created_at': 'createdAt',
        'user_id': 'userId',
        'user_email': 'userEmail',
        'event_type': 'eventType',
        'old_value': 'oldValue',
        'new_value': 'newValue'
    }

    def __init__(self, id=None, model=None, created_at=None, user_id=None, user_email=None, event_type=None, old_value=None, new_value=None):  # noqa: E501
        """SecurityLogEventObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._created_at = None
        self._user_id = None
        self._user_email = None
        self._event_type = None
        self._old_value = None
        self._new_value = None
        self.discriminator = None
        self.id = id
        self.model = model
        self.created_at = created_at
        self.user_id = user_id
        self.user_email = user_email
        self.event_type = event_type
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value

    @property
    def id(self):
        """Gets the id of this SecurityLogEventObject.  # noqa: E501

        The unique ID of the event.  # noqa: E501

        :return: The id of this SecurityLogEventObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SecurityLogEventObject.

        The unique ID of the event.  # noqa: E501

        :param id: The id of this SecurityLogEventObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self):
        """Gets the model of this SecurityLogEventObject.  # noqa: E501

        The model is always `securityLogEvent`.  # noqa: E501

        :return: The model of this SecurityLogEventObject.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SecurityLogEventObject.

        The model is always `securityLogEvent`.  # noqa: E501

        :param model: The model of this SecurityLogEventObject.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501
        allowed_values = ["securityLogEvent"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def created_at(self):
        """Gets the created_at of this SecurityLogEventObject.  # noqa: E501

        The date and time the event occurred. See [Date formats](https://developers.notion.com/reference/rich-text#date-property-values).  # noqa: E501

        :return: The created_at of this SecurityLogEventObject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SecurityLogEventObject.

        The date and time the event occurred. See [Date formats](https://developers.notion.com/reference/rich-text#date-property-values).  # noqa: E501

        :param created_at: The created_at of this SecurityLogEventObject.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this SecurityLogEventObject.  # noqa: E501

        The ID of the user that initiated the event.  # noqa: E501

        :return: The user_id of this SecurityLogEventObject.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SecurityLogEventObject.

        The ID of the user that initiated the event.  # noqa: E501

        :param user_id: The user_id of this SecurityLogEventObject.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def user_email(self):
        """Gets the user_email of this SecurityLogEventObject.  # noqa: E501

        The email of the user that initiated the event.  # noqa: E501

        :return: The user_email of this SecurityLogEventObject.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this SecurityLogEventObject.

        The email of the user that initiated the event.  # noqa: E501

        :param user_email: The user_email of this SecurityLogEventObject.  # noqa: E501
        :type: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def event_type(self):
        """Gets the event_type of this SecurityLogEventObject.  # noqa: E501

        Possible values are:  - `FieldTemplateInsert`: an attribute was created - `FieldTemplateUpdate`: an attribute was updated - `FieldTemplateArchive`: an attribute was archived - `FieldTemplateRestore`: an attribute was restored - `PermissionUpsert`: a list permission was created or updated - `PermissionDelete`: a list permission was deleted - `UserInvite`: an user was invited - `UserSignUp`: an user signed up  # noqa: E501

        :return: The event_type of this SecurityLogEventObject.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this SecurityLogEventObject.

        Possible values are:  - `FieldTemplateInsert`: an attribute was created - `FieldTemplateUpdate`: an attribute was updated - `FieldTemplateArchive`: an attribute was archived - `FieldTemplateRestore`: an attribute was restored - `PermissionUpsert`: a list permission was created or updated - `PermissionDelete`: a list permission was deleted - `UserInvite`: an user was invited - `UserSignUp`: an user signed up  # noqa: E501

        :param event_type: The event_type of this SecurityLogEventObject.  # noqa: E501
        :type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501
        allowed_values = ["FieldTemplateInsert", "FieldTemplateUpdate", "FieldTemplateArchive", "FieldTemplateRestore", "PermissionUpsert", "PermissionDelete", "UserInvite", "UserSignUp"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def old_value(self):
        """Gets the old_value of this SecurityLogEventObject.  # noqa: E501

        The old value of the attribute, permission, etc. that was updated or deleted.  # noqa: E501

        :return: The old_value of this SecurityLogEventObject.  # noqa: E501
        :rtype: object
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this SecurityLogEventObject.

        The old value of the attribute, permission, etc. that was updated or deleted.  # noqa: E501

        :param old_value: The old_value of this SecurityLogEventObject.  # noqa: E501
        :type: object
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this SecurityLogEventObject.  # noqa: E501

        The new value of the attribute, permission, etc. that was updated or created.  # noqa: E501

        :return: The new_value of this SecurityLogEventObject.  # noqa: E501
        :rtype: object
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this SecurityLogEventObject.

        The new value of the attribute, permission, etc. that was updated or created.  # noqa: E501

        :param new_value: The new_value of this SecurityLogEventObject.  # noqa: E501
        :type: object
        """

        self._new_value = new_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SecurityLogEventObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SecurityLogEventObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
