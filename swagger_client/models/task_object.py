# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  ---  # Authentication   The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.   i.e. Get your workspace.   ```bash  curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```   Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.   # Object formats   All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.   e.g. a task object.   ```json  {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] }  ```   # Date formats   Every date uses the ISO format e.g.   ```js  \"2019-11-07T17:00:00.000Z\"  ```   # Real-time   Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.   # Rate limits   To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.   Height allows up to 120 requests/min, but we have stricter limits on these endpoints:   - `POST /activities`: 60 requests/min  - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'index': 'float',
        'list_ids': 'list[str]',
        'name': 'str',
        'description': 'str',
        'status': 'str',
        'assignees_ids': 'list[str]',
        'fields': 'list[TaskObjectFields]',
        'deleted': 'bool',
        'deleted_at': 'datetime',
        'deleted_by_user_id': 'str',
        'completed': 'bool',
        'completed_at': 'datetime',
        'created_at': 'datetime',
        'created_user_id': 'str',
        'last_activity_at': 'datetime',
        'url': 'str',
        'trashed_at': 'datetime',
        'trashed_by_user_id': 'str',
        'parent_task_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'index': 'index',
        'list_ids': 'listIds',
        'name': 'name',
        'description': 'description',
        'status': 'status',
        'assignees_ids': 'assigneesIds',
        'fields': 'fields',
        'deleted': 'deleted',
        'deleted_at': 'deletedAt',
        'deleted_by_user_id': 'deletedByUserId',
        'completed': 'completed',
        'completed_at': 'completedAt',
        'created_at': 'createdAt',
        'created_user_id': 'createdUserId',
        'last_activity_at': 'lastActivityAt',
        'url': 'url',
        'trashed_at': 'trashedAt',
        'trashed_by_user_id': 'trashedByUserId',
        'parent_task_id': 'parentTaskId'
    }

    def __init__(self, id=None, model=None, index=None, list_ids=None, name=None, description=None, status=None, assignees_ids=None, fields=None, deleted=None, deleted_at=None, deleted_by_user_id=None, completed=None, completed_at=None, created_at=None, created_user_id=None, last_activity_at=None, url=None, trashed_at=None, trashed_by_user_id=None, parent_task_id=None):  # noqa: E501
        """TaskObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._index = None
        self._list_ids = None
        self._name = None
        self._description = None
        self._status = None
        self._assignees_ids = None
        self._fields = None
        self._deleted = None
        self._deleted_at = None
        self._deleted_by_user_id = None
        self._completed = None
        self._completed_at = None
        self._created_at = None
        self._created_user_id = None
        self._last_activity_at = None
        self._url = None
        self._trashed_at = None
        self._trashed_by_user_id = None
        self._parent_task_id = None
        self.discriminator = None
        self.id = id
        self.model = model
        self.index = index
        self.list_ids = list_ids
        self.name = name
        self.description = description
        self.status = status
        self.assignees_ids = assignees_ids
        self.fields = fields
        self.deleted = deleted
        if deleted_at is not None:
            self.deleted_at = deleted_at
        if deleted_by_user_id is not None:
            self.deleted_by_user_id = deleted_by_user_id
        self.completed = completed
        if completed_at is not None:
            self.completed_at = completed_at
        self.created_at = created_at
        self.created_user_id = created_user_id
        self.last_activity_at = last_activity_at
        self.url = url
        if trashed_at is not None:
            self.trashed_at = trashed_at
        if trashed_by_user_id is not None:
            self.trashed_by_user_id = trashed_by_user_id
        if parent_task_id is not None:
            self.parent_task_id = parent_task_id

    @property
    def id(self):
        """Gets the id of this TaskObject.  # noqa: E501

        The unique id of the task  # noqa: E501

        :return: The id of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskObject.

        The unique id of the task  # noqa: E501

        :param id: The id of this TaskObject.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self):
        """Gets the model of this TaskObject.  # noqa: E501

        The model is always `task`  # noqa: E501

        :return: The model of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TaskObject.

        The model is always `task`  # noqa: E501

        :param model: The model of this TaskObject.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501
        allowed_values = ["task"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def index(self):
        """Gets the index of this TaskObject.  # noqa: E501

        The task index. For example, if the task is T-123, its index is 123.  # noqa: E501

        :return: The index of this TaskObject.  # noqa: E501
        :rtype: float
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this TaskObject.

        The task index. For example, if the task is T-123, its index is 123.  # noqa: E501

        :param index: The index of this TaskObject.  # noqa: E501
        :type: float
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")  # noqa: E501

        self._index = index

    @property
    def list_ids(self):
        """Gets the list_ids of this TaskObject.  # noqa: E501

        Tasks belong to one or more lists. To create tasks, it's necessary to know in which list you want to create them.  # noqa: E501

        :return: The list_ids of this TaskObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """Sets the list_ids of this TaskObject.

        Tasks belong to one or more lists. To create tasks, it's necessary to know in which list you want to create them.  # noqa: E501

        :param list_ids: The list_ids of this TaskObject.  # noqa: E501
        :type: list[str]
        """
        if list_ids is None:
            raise ValueError("Invalid value for `list_ids`, must not be `None`")  # noqa: E501

        self._list_ids = list_ids

    @property
    def name(self):
        """Gets the name of this TaskObject.  # noqa: E501

        The name of the task.  # noqa: E501

        :return: The name of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskObject.

        The name of the task.  # noqa: E501

        :param name: The name of this TaskObject.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this TaskObject.  # noqa: E501

        The description of the task. It's only retrieved if you use include. See ['Get a task'](https://www.notion.so/Get-a-task-8afda1c08e7f4f07a5c53720710cf24e).  # noqa: E501

        :return: The description of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TaskObject.

        The description of the task. It's only retrieved if you use include. See ['Get a task'](https://www.notion.so/Get-a-task-8afda1c08e7f4f07a5c53720710cf24e).  # noqa: E501

        :param description: The description of this TaskObject.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def status(self):
        """Gets the status of this TaskObject.  # noqa: E501

        The status of the task. - `backLog` - `inProgress` - `done` - and any *UUID* of available statuses. You can find the *UUIDs* through the field template API.  # noqa: E501

        :return: The status of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskObject.

        The status of the task. - `backLog` - `inProgress` - `done` - and any *UUID* of available statuses. You can find the *UUIDs* through the field template API.  # noqa: E501

        :param status: The status of this TaskObject.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def assignees_ids(self):
        """Gets the assignees_ids of this TaskObject.  # noqa: E501

        The assignees of the task. You can find the UUIDs of users through the users API.  ['List all users'](https://www.notion.so/List-all-users-ea66d04e48534b32927903c4deee58e8)  # noqa: E501

        :return: The assignees_ids of this TaskObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignees_ids

    @assignees_ids.setter
    def assignees_ids(self, assignees_ids):
        """Sets the assignees_ids of this TaskObject.

        The assignees of the task. You can find the UUIDs of users through the users API.  ['List all users'](https://www.notion.so/List-all-users-ea66d04e48534b32927903c4deee58e8)  # noqa: E501

        :param assignees_ids: The assignees_ids of this TaskObject.  # noqa: E501
        :type: list[str]
        """
        if assignees_ids is None:
            raise ValueError("Invalid value for `assignees_ids`, must not be `None`")  # noqa: E501

        self._assignees_ids = assignees_ids

    @property
    def fields(self):
        """Gets the fields of this TaskObject.  # noqa: E501


        :return: The fields of this TaskObject.  # noqa: E501
        :rtype: list[TaskObjectFields]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this TaskObject.


        :param fields: The fields of this TaskObject.  # noqa: E501
        :type: list[TaskObjectFields]
        """
        if fields is None:
            raise ValueError("Invalid value for `fields`, must not be `None`")  # noqa: E501

        self._fields = fields

    @property
    def deleted(self):
        """Gets the deleted of this TaskObject.  # noqa: E501

        If the task was deleted.  # noqa: E501

        :return: The deleted of this TaskObject.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this TaskObject.

        If the task was deleted.  # noqa: E501

        :param deleted: The deleted of this TaskObject.  # noqa: E501
        :type: bool
        """
        if deleted is None:
            raise ValueError("Invalid value for `deleted`, must not be `None`")  # noqa: E501

        self._deleted = deleted

    @property
    def deleted_at(self):
        """Gets the deleted_at of this TaskObject.  # noqa: E501

        The date at which the task was deleted.  # noqa: E501

        :return: The deleted_at of this TaskObject.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this TaskObject.

        The date at which the task was deleted.  # noqa: E501

        :param deleted_at: The deleted_at of this TaskObject.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    @property
    def deleted_by_user_id(self):
        """Gets the deleted_by_user_id of this TaskObject.  # noqa: E501

        The user that deleted the task.  # noqa: E501

        :return: The deleted_by_user_id of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._deleted_by_user_id

    @deleted_by_user_id.setter
    def deleted_by_user_id(self, deleted_by_user_id):
        """Sets the deleted_by_user_id of this TaskObject.

        The user that deleted the task.  # noqa: E501

        :param deleted_by_user_id: The deleted_by_user_id of this TaskObject.  # noqa: E501
        :type: str
        """

        self._deleted_by_user_id = deleted_by_user_id

    @property
    def completed(self):
        """Gets the completed of this TaskObject.  # noqa: E501

        If the status is considered as completed (i.e. `done`), the value will be `true`.  # noqa: E501

        :return: The completed of this TaskObject.  # noqa: E501
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed):
        """Sets the completed of this TaskObject.

        If the status is considered as completed (i.e. `done`), the value will be `true`.  # noqa: E501

        :param completed: The completed of this TaskObject.  # noqa: E501
        :type: bool
        """
        if completed is None:
            raise ValueError("Invalid value for `completed`, must not be `None`")  # noqa: E501

        self._completed = completed

    @property
    def completed_at(self):
        """Gets the completed_at of this TaskObject.  # noqa: E501


        :return: The completed_at of this TaskObject.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this TaskObject.


        :param completed_at: The completed_at of this TaskObject.  # noqa: E501
        :type: datetime
        """

        self._completed_at = completed_at

    @property
    def created_at(self):
        """Gets the created_at of this TaskObject.  # noqa: E501


        :return: The created_at of this TaskObject.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this TaskObject.


        :param created_at: The created_at of this TaskObject.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def created_user_id(self):
        """Gets the created_user_id of this TaskObject.  # noqa: E501

        The user that created the task.  # noqa: E501

        :return: The created_user_id of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._created_user_id

    @created_user_id.setter
    def created_user_id(self, created_user_id):
        """Sets the created_user_id of this TaskObject.

        The user that created the task.  # noqa: E501

        :param created_user_id: The created_user_id of this TaskObject.  # noqa: E501
        :type: str
        """
        if created_user_id is None:
            raise ValueError("Invalid value for `created_user_id`, must not be `None`")  # noqa: E501

        self._created_user_id = created_user_id

    @property
    def last_activity_at(self):
        """Gets the last_activity_at of this TaskObject.  # noqa: E501


        :return: The last_activity_at of this TaskObject.  # noqa: E501
        :rtype: datetime
        """
        return self._last_activity_at

    @last_activity_at.setter
    def last_activity_at(self, last_activity_at):
        """Sets the last_activity_at of this TaskObject.


        :param last_activity_at: The last_activity_at of this TaskObject.  # noqa: E501
        :type: datetime
        """
        if last_activity_at is None:
            raise ValueError("Invalid value for `last_activity_at`, must not be `None`")  # noqa: E501

        self._last_activity_at = last_activity_at

    @property
    def url(self):
        """Gets the url of this TaskObject.  # noqa: E501

        The URL of the task.  # noqa: E501

        :return: The url of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskObject.

        The URL of the task.  # noqa: E501

        :param url: The url of this TaskObject.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def trashed_at(self):
        """Gets the trashed_at of this TaskObject.  # noqa: E501

        A timestamp when the task was moved to the trash. Tasks are deleted after 30 days in the trash. This will be null unless the task is currently in the trash or deleted.  # noqa: E501

        :return: The trashed_at of this TaskObject.  # noqa: E501
        :rtype: datetime
        """
        return self._trashed_at

    @trashed_at.setter
    def trashed_at(self, trashed_at):
        """Sets the trashed_at of this TaskObject.

        A timestamp when the task was moved to the trash. Tasks are deleted after 30 days in the trash. This will be null unless the task is currently in the trash or deleted.  # noqa: E501

        :param trashed_at: The trashed_at of this TaskObject.  # noqa: E501
        :type: datetime
        """

        self._trashed_at = trashed_at

    @property
    def trashed_by_user_id(self):
        """Gets the trashed_by_user_id of this TaskObject.  # noqa: E501

        The id of the user that moved the task to the trash  # noqa: E501

        :return: The trashed_by_user_id of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._trashed_by_user_id

    @trashed_by_user_id.setter
    def trashed_by_user_id(self, trashed_by_user_id):
        """Sets the trashed_by_user_id of this TaskObject.

        The id of the user that moved the task to the trash  # noqa: E501

        :param trashed_by_user_id: The trashed_by_user_id of this TaskObject.  # noqa: E501
        :type: str
        """

        self._trashed_by_user_id = trashed_by_user_id

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this TaskObject.  # noqa: E501

        If the task is a subtask of another task, `parentTaskId` will be the id of the parent task.  # noqa: E501

        :return: The parent_task_id of this TaskObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this TaskObject.

        If the task is a subtask of another task, `parentTaskId` will be the id of the parent task.  # noqa: E501

        :param parent_task_id: The parent_task_id of this TaskObject.  # noqa: E501
        :type: str
        """

        self._parent_task_id = parent_task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
