# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  --- # Authentication  The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.  i.e. Get your workspace.  ```bash curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```  Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.  # Object formats  All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.  e.g. a task object.  ```json {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] } ```  # Date formats  Every date uses the ISO format e.g.  ```js \"2019-11-07T17:00:00.000Z\" ```  # Real-time  Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.  # Rate limits  To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.  Height allows up to 120 requests/min, but we have stricter limits on these endpoints:  - `POST /activities`: 60 requests/min - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FieldTemplateObjectLabels(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'value': 'str',
        'hue': 'float',
        'label_set_id': 'str',
        'status_state': 'str'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'value': 'value',
        'hue': 'hue',
        'label_set_id': 'labelSetId',
        'status_state': 'statusState'
    }

    def __init__(self, id=None, model=None, value=None, hue=None, label_set_id=None, status_state=None):  # noqa: E501
        """FieldTemplateObjectLabels - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._value = None
        self._hue = None
        self._label_set_id = None
        self._status_state = None
        self.discriminator = None
        self.id = id
        self.model = model
        self.value = value
        self.hue = hue
        if label_set_id is not None:
            self.label_set_id = label_set_id
        self.status_state = status_state

    @property
    def id(self):
        """Gets the id of this FieldTemplateObjectLabels.  # noqa: E501

        UUID or string (backLog, inProgress and done are hard-coded).  # noqa: E501

        :return: The id of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FieldTemplateObjectLabels.

        UUID or string (backLog, inProgress and done are hard-coded).  # noqa: E501

        :param id: The id of this FieldTemplateObjectLabels.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def model(self):
        """Gets the model of this FieldTemplateObjectLabels.  # noqa: E501

        The model is always `fieldLabel`.  # noqa: E501

        :return: The model of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this FieldTemplateObjectLabels.

        The model is always `fieldLabel`.  # noqa: E501

        :param model: The model of this FieldTemplateObjectLabels.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501
        allowed_values = ["fieldLabel"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def value(self):
        """Gets the value of this FieldTemplateObjectLabels.  # noqa: E501

        The name of the label.  # noqa: E501

        :return: The value of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FieldTemplateObjectLabels.

        The name of the label.  # noqa: E501

        :param value: The value of this FieldTemplateObjectLabels.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def hue(self):
        """Gets the hue of this FieldTemplateObjectLabels.  # noqa: E501

        The hue of the label's color (between 0 and 360).  # noqa: E501

        :return: The hue of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: float
        """
        return self._hue

    @hue.setter
    def hue(self, hue):
        """Sets the hue of this FieldTemplateObjectLabels.

        The hue of the label's color (between 0 and 360).  # noqa: E501

        :param hue: The hue of this FieldTemplateObjectLabels.  # noqa: E501
        :type: float
        """
        if hue is None:
            raise ValueError("Invalid value for `hue`, must not be `None`")  # noqa: E501

        self._hue = hue

    @property
    def label_set_id(self):
        """Gets the label_set_id of this FieldTemplateObjectLabels.  # noqa: E501

        The id of the label set this label belongs to, if any. Only if the type of field template is `status`.  # noqa: E501

        :return: The label_set_id of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: str
        """
        return self._label_set_id

    @label_set_id.setter
    def label_set_id(self, label_set_id):
        """Sets the label_set_id of this FieldTemplateObjectLabels.

        The id of the label set this label belongs to, if any. Only if the type of field template is `status`.  # noqa: E501

        :param label_set_id: The label_set_id of this FieldTemplateObjectLabels.  # noqa: E501
        :type: str
        """

        self._label_set_id = label_set_id

    @property
    def status_state(self):
        """Gets the status_state of this FieldTemplateObjectLabels.  # noqa: E501

        The state of the status, only available when the type of the field template is `status`. Note that a task is considered as completed if its status has a state of `canceled` or `completed`.  # noqa: E501

        :return: The status_state of this FieldTemplateObjectLabels.  # noqa: E501
        :rtype: str
        """
        return self._status_state

    @status_state.setter
    def status_state(self, status_state):
        """Sets the status_state of this FieldTemplateObjectLabels.

        The state of the status, only available when the type of the field template is `status`. Note that a task is considered as completed if its status has a state of `canceled` or `completed`.  # noqa: E501

        :param status_state: The status_state of this FieldTemplateObjectLabels.  # noqa: E501
        :type: str
        """
        if status_state is None:
            raise ValueError("Invalid value for `status_state`, must not be `None`")  # noqa: E501
        allowed_values = ["default", "started", "blocked", "canceled", "completed"]  # noqa: E501
        if status_state not in allowed_values:
            raise ValueError(
                "Invalid value for `status_state` ({0}), must be one of {1}"  # noqa: E501
                .format(status_state, allowed_values)
            )

        self._status_state = status_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FieldTemplateObjectLabels, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldTemplateObjectLabels):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
