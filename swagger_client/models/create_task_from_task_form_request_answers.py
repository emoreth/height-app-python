# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  ---  # Authentication   The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.   i.e. Get your workspace.   ```bash  curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```   Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.   # Object formats   All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.   e.g. a task object.   ```json  {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] }  ```   # Date formats   Every date uses the ISO format e.g.   ```js  \"2019-11-07T17:00:00.000Z\"  ```   # Real-time   Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.   # Rate limits   To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.   Height allows up to 120 requests/min, but we have stricter limits on these endpoints:   - `POST /activities`: 60 requests/min  - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTaskFromTaskFormRequestAnswers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'question_id': 'str',
        'name': 'str',
        'status': 'str',
        'assignees_ids': 'list[str]',
        'list_ids': 'list[str]',
        'description': 'str',
        'field': 'CreateTaskFromTaskFormRequestField'
    }

    attribute_map = {
        'question_id': 'questionId',
        'name': 'name',
        'status': 'status',
        'assignees_ids': 'assigneesIds',
        'list_ids': 'listIds',
        'description': 'description',
        'field': 'field'
    }

    def __init__(self, question_id=None, name=None, status=None, assignees_ids=None, list_ids=None, description=None, field=None):  # noqa: E501
        """CreateTaskFromTaskFormRequestAnswers - a model defined in Swagger"""  # noqa: E501
        self._question_id = None
        self._name = None
        self._status = None
        self._assignees_ids = None
        self._list_ids = None
        self._description = None
        self._field = None
        self.discriminator = None
        if question_id is not None:
            self.question_id = question_id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if assignees_ids is not None:
            self.assignees_ids = assignees_ids
        if list_ids is not None:
            self.list_ids = list_ids
        if description is not None:
            self.description = description
        if field is not None:
            self.field = field

    @property
    def question_id(self):
        """Gets the question_id of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The id of the task form question  # noqa: E501

        :return: The question_id of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this CreateTaskFromTaskFormRequestAnswers.

        The id of the task form question  # noqa: E501

        :param question_id: The question_id of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: str
        """

        self._question_id = question_id

    @property
    def name(self):
        """Gets the name of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The name of the task - required when the question is for the task name  # noqa: E501

        :return: The name of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTaskFromTaskFormRequestAnswers.

        The name of the task - required when the question is for the task name  # noqa: E501

        :param name: The name of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The id of the status of the task - required when the question is for the task status  # noqa: E501

        :return: The status of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateTaskFromTaskFormRequestAnswers.

        The id of the status of the task - required when the question is for the task status  # noqa: E501

        :param status: The status of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def assignees_ids(self):
        """Gets the assignees_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The ids of the assignees of the task - required when the question is for the task assignees.  # noqa: E501

        :return: The assignees_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignees_ids

    @assignees_ids.setter
    def assignees_ids(self, assignees_ids):
        """Sets the assignees_ids of this CreateTaskFromTaskFormRequestAnswers.

        The ids of the assignees of the task - required when the question is for the task assignees.  # noqa: E501

        :param assignees_ids: The assignees_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: list[str]
        """

        self._assignees_ids = assignees_ids

    @property
    def list_ids(self):
        """Gets the list_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The ids of the lists of the task - required when the question is for the lists  # noqa: E501

        :return: The list_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """Sets the list_ids of this CreateTaskFromTaskFormRequestAnswers.

        The ids of the lists of the task - required when the question is for the lists  # noqa: E501

        :param list_ids: The list_ids of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: list[str]
        """

        self._list_ids = list_ids

    @property
    def description(self):
        """Gets the description of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501

        The description of the string. Accepts markdown. Required when the question is for the description  # noqa: E501

        :return: The description of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTaskFromTaskFormRequestAnswers.

        The description of the string. Accepts markdown. Required when the question is for the description  # noqa: E501

        :param description: The description of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def field(self):
        """Gets the field of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501


        :return: The field of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :rtype: CreateTaskFromTaskFormRequestField
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this CreateTaskFromTaskFormRequestAnswers.


        :param field: The field of this CreateTaskFromTaskFormRequestAnswers.  # noqa: E501
        :type: CreateTaskFromTaskFormRequestField
        """

        self._field = field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTaskFromTaskFormRequestAnswers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTaskFromTaskFormRequestAnswers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
