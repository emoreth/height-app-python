# coding: utf-8

"""
    Height APP API

    Unofficial Open API 3.1 specification for [Height App API](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda). This is not affiliated with Height team.  ---  # Authentication   The Height API uses API keys to authenticate requests. **You can view your API key in the Height settings under API**.  Authentication to the API is performed via the `Authorization` header. All API requests should be made over HTTPs.   i.e. Get your workspace.   ```bash  curl https://api.height.app/workspace \\   -H \"Authorization: api-key secret_1234\" ```   Third-party applications must connect to the Height API using [OAuth2](https://www.notion.so/API-documentation-643aea5bf01742de9232e5971cb4afda).   See [OAuth Apps on Height](https://www.notion.so/OAuth-Apps-on-Height-a8ebeab3f3f047e3857bd8ce60c2f640) for more information.   # Object formats   All objects have a unique `id` ([UUID v4](https://en.m.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))) and a `model` attribute to distinguish the model type.   e.g. a task object.   ```json  {   \"id\": \"123e4567-e89b-12d3-a456-426655440000\",   \"model\": \"task\",   \"name\": \"Fix bug\",   \"index\": 1,   \"status\": \"backLog\",   [...] }  ```   # Date formats   Every date uses the ISO format e.g.   ```js  \"2019-11-07T17:00:00.000Z\"  ```   # Real-time   Any change that you make to the API will be pushed to every user in real-time: i.e. creating tasks or messages.   # Rate limits   To keep incoming traffic under control and maintain a great experience for all our users, our API is behind a rate limiter. Users who send many requests in quick succession may see error responses that show up as status code 429.   Height allows up to 120 requests/min, but we have stricter limits on these endpoints:   - `POST /activities`: 60 requests/min  - `POST /tasks`: 60 requests/min  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: gil@beomjun.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskFormObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'model': 'str',
        'version': 'int',
        'key': 'str',
        'url_key': 'str',
        'url': 'str',
        'name': 'str',
        'task_form_description': 'str',
        'disabled_reason': 'str',
        'archived': 'bool',
        'draft': 'bool',
        'public_access': 'str',
        'list_ids': 'list[str]',
        'parent_task_id': 'str',
        'status': 'str',
        'questions': 'list[TaskFormObjectQuestions]'
    }

    attribute_map = {
        'id': 'id',
        'model': 'model',
        'version': 'version',
        'key': 'key',
        'url_key': 'urlKey',
        'url': 'url',
        'name': 'name',
        'task_form_description': 'taskFormDescription',
        'disabled_reason': 'disabledReason',
        'archived': 'archived',
        'draft': 'draft',
        'public_access': 'publicAccess',
        'list_ids': 'listIds',
        'parent_task_id': 'parentTaskId',
        'status': 'status',
        'questions': 'questions'
    }

    def __init__(self, id=None, model=None, version=None, key=None, url_key=None, url=None, name=None, task_form_description=None, disabled_reason=None, archived=None, draft=None, public_access=None, list_ids=None, parent_task_id=None, status=None, questions=None):  # noqa: E501
        """TaskFormObject - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._model = None
        self._version = None
        self._key = None
        self._url_key = None
        self._url = None
        self._name = None
        self._task_form_description = None
        self._disabled_reason = None
        self._archived = None
        self._draft = None
        self._public_access = None
        self._list_ids = None
        self._parent_task_id = None
        self._status = None
        self._questions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if version is not None:
            self.version = version
        if key is not None:
            self.key = key
        if url_key is not None:
            self.url_key = url_key
        if url is not None:
            self.url = url
        if name is not None:
            self.name = name
        if task_form_description is not None:
            self.task_form_description = task_form_description
        if disabled_reason is not None:
            self.disabled_reason = disabled_reason
        if archived is not None:
            self.archived = archived
        if draft is not None:
            self.draft = draft
        if public_access is not None:
            self.public_access = public_access
        if list_ids is not None:
            self.list_ids = list_ids
        if parent_task_id is not None:
            self.parent_task_id = parent_task_id
        if status is not None:
            self.status = status
        if questions is not None:
            self.questions = questions

    @property
    def id(self):
        """Gets the id of this TaskFormObject.  # noqa: E501

        The ID of the task form.  # noqa: E501

        :return: The id of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskFormObject.

        The ID of the task form.  # noqa: E501

        :param id: The id of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this TaskFormObject.  # noqa: E501

        always \"taskForm\"  # noqa: E501

        :return: The model of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this TaskFormObject.

        always \"taskForm\"  # noqa: E501

        :param model: The model of this TaskFormObject.  # noqa: E501
        :type: str
        """
        allowed_values = ["taskForm"]  # noqa: E501
        if model not in allowed_values:
            raise ValueError(
                "Invalid value for `model` ({0}), must be one of {1}"  # noqa: E501
                .format(model, allowed_values)
            )

        self._model = model

    @property
    def version(self):
        """Gets the version of this TaskFormObject.  # noqa: E501

        The version of the task form.  # noqa: E501

        :return: The version of this TaskFormObject.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TaskFormObject.

        The version of the task form.  # noqa: E501

        :param version: The version of this TaskFormObject.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def key(self):
        """Gets the key of this TaskFormObject.  # noqa: E501

        The key of the task form.  # noqa: E501

        :return: The key of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this TaskFormObject.

        The key of the task form.  # noqa: E501

        :param key: The key of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def url_key(self):
        """Gets the url_key of this TaskFormObject.  # noqa: E501

        The URL key of the task form.  # noqa: E501

        :return: The url_key of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key):
        """Sets the url_key of this TaskFormObject.

        The URL key of the task form.  # noqa: E501

        :param url_key: The url_key of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._url_key = url_key

    @property
    def url(self):
        """Gets the url of this TaskFormObject.  # noqa: E501

        The URL of the task form.  # noqa: E501

        :return: The url of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this TaskFormObject.

        The URL of the task form.  # noqa: E501

        :param url: The url of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def name(self):
        """Gets the name of this TaskFormObject.  # noqa: E501

        The name of the task form.  # noqa: E501

        :return: The name of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TaskFormObject.

        The name of the task form.  # noqa: E501

        :param name: The name of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def task_form_description(self):
        """Gets the task_form_description of this TaskFormObject.  # noqa: E501

        The description of the task form.  # noqa: E501

        :return: The task_form_description of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._task_form_description

    @task_form_description.setter
    def task_form_description(self, task_form_description):
        """Sets the task_form_description of this TaskFormObject.

        The description of the task form.  # noqa: E501

        :param task_form_description: The task_form_description of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._task_form_description = task_form_description

    @property
    def disabled_reason(self):
        """Gets the disabled_reason of this TaskFormObject.  # noqa: E501

        The reason why the task form is disabled.  # noqa: E501

        :return: The disabled_reason of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._disabled_reason

    @disabled_reason.setter
    def disabled_reason(self, disabled_reason):
        """Sets the disabled_reason of this TaskFormObject.

        The reason why the task form is disabled.  # noqa: E501

        :param disabled_reason: The disabled_reason of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._disabled_reason = disabled_reason

    @property
    def archived(self):
        """Gets the archived of this TaskFormObject.  # noqa: E501

        Flag to indicate whether the task form is archived.  # noqa: E501

        :return: The archived of this TaskFormObject.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this TaskFormObject.

        Flag to indicate whether the task form is archived.  # noqa: E501

        :param archived: The archived of this TaskFormObject.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def draft(self):
        """Gets the draft of this TaskFormObject.  # noqa: E501

        Flag to indicate whether the task form is a draft.  # noqa: E501

        :return: The draft of this TaskFormObject.  # noqa: E501
        :rtype: bool
        """
        return self._draft

    @draft.setter
    def draft(self, draft):
        """Sets the draft of this TaskFormObject.

        Flag to indicate whether the task form is a draft.  # noqa: E501

        :param draft: The draft of this TaskFormObject.  # noqa: E501
        :type: bool
        """

        self._draft = draft

    @property
    def public_access(self):
        """Gets the public_access of this TaskFormObject.  # noqa: E501

        The type of public access for the task form.  # noqa: E501

        :return: The public_access of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._public_access

    @public_access.setter
    def public_access(self, public_access):
        """Sets the public_access of this TaskFormObject.

        The type of public access for the task form.  # noqa: E501

        :param public_access: The public_access of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._public_access = public_access

    @property
    def list_ids(self):
        """Gets the list_ids of this TaskFormObject.  # noqa: E501

        The IDs of the lists associated with the task form.  # noqa: E501

        :return: The list_ids of this TaskFormObject.  # noqa: E501
        :rtype: list[str]
        """
        return self._list_ids

    @list_ids.setter
    def list_ids(self, list_ids):
        """Sets the list_ids of this TaskFormObject.

        The IDs of the lists associated with the task form.  # noqa: E501

        :param list_ids: The list_ids of this TaskFormObject.  # noqa: E501
        :type: list[str]
        """

        self._list_ids = list_ids

    @property
    def parent_task_id(self):
        """Gets the parent_task_id of this TaskFormObject.  # noqa: E501

        The ID of the parent task.  # noqa: E501

        :return: The parent_task_id of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._parent_task_id

    @parent_task_id.setter
    def parent_task_id(self, parent_task_id):
        """Sets the parent_task_id of this TaskFormObject.

        The ID of the parent task.  # noqa: E501

        :param parent_task_id: The parent_task_id of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._parent_task_id = parent_task_id

    @property
    def status(self):
        """Gets the status of this TaskFormObject.  # noqa: E501

        The status of the task. - `backLog` - `inProgress` - `done` - and any *UUID* of available statuses. You can find the *UUIDs* through the field template API.  # noqa: E501

        :return: The status of this TaskFormObject.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskFormObject.

        The status of the task. - `backLog` - `inProgress` - `done` - and any *UUID* of available statuses. You can find the *UUIDs* through the field template API.  # noqa: E501

        :param status: The status of this TaskFormObject.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def questions(self):
        """Gets the questions of this TaskFormObject.  # noqa: E501


        :return: The questions of this TaskFormObject.  # noqa: E501
        :rtype: list[TaskFormObjectQuestions]
        """
        return self._questions

    @questions.setter
    def questions(self, questions):
        """Sets the questions of this TaskFormObject.


        :param questions: The questions of this TaskFormObject.  # noqa: E501
        :type: list[TaskFormObjectQuestions]
        """

        self._questions = questions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskFormObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskFormObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
